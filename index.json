[{"authors":["admin"],"categories":null,"content":"I enjoy working within the field of data engineering and web analytics. This site is build in order for me to document some of my work, so others can benefit from it, as well as serving as a memory bank for storing solutions i\u0026rsquo;ve build through time.\n","date":1632182400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1632182400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I enjoy working within the field of data engineering and web analytics. This site is build in order for me to document some of my work, so others can benefit from it, as well as serving as a memory bank for storing solutions i\u0026rsquo;ve build through time.","tags":null,"title":"Danny Mawani Holmgaard","type":"authors"},{"authors":["Danny Mawani Holmgaard"],"categories":null,"content":"Table of Contents    Introduction Usecases How to use the container Rounding things up     Introduction As my organization Lederne are in a journey of switching from on-prem systems into Snowflake as our dataplatform, I have looked far and wide in order to find a production ready docker image that supports using R with Snowflake. As I could not find anything in my search, I decided to build an image myself. Thankfully a lot of the driver setup was already build for a Python image created by Zohar Nissare-Houssen in his snowflake-jupyter repo.\nUsecases I use R for a lot of data-wrangling, but also to help me with a lot of Data Engineering tasks. With R connected to snowflake, I have been able to:\n Speed up the writing of some SQL queries by utilizing the DBPlyr package Create and clean tables Schedule tasks that builds models from SnowfLake  How to use the container The container is open for everyone to get at My github page. Below I have written how to use the image:\n  To build the image after pulling it from GitHub, write docker build --tag dev:latest . in your terminal where you have changed the directory to the folder the docker file is in.\n  Write docker run -d -p 8787:8787 -e PASSWORD=1234 dev:latest\n(replace pass to your liking). If you want, you can mount a directory with a project to work on like this:\ndocker run --rm -p 8787:8787 -v C:/Users/DannysComputer/Documents/rstudio:/home/rstudio -e PASSWORD=1234 dev:latest\nIn order to just execute a script you can use:\ndocker run dev:latest Rscript -e 'source(\u0026quot;/home/rstudio/main.R\u0026quot;)'    You can now log in at http://localhost:8787/\n  Connect to snowflake Use this to set up a connection to Snowflake:\n#Load libraries library(tidyverse) library(odbc) library(DBI) #log in con \u0026lt;- DBI::dbConnect( drv = odbc::odbc(), UID = \u0026quot;username\u0026quot;, PWD = \u0026quot;password\u0026quot;, Server = \u0026quot;yourAccount.west-europe.azure.snowflakecomputing.com\u0026quot;, Warehouse = 'COMPUTE_WH', Driver = \u0026quot;SnowflakeDSIIDriver\u0026quot;, Database = \u0026quot;yourDataBase\u0026quot;, Schema = \u0026quot;yourSchema\u0026quot;)  Alternatively, you can edit the odbc.ini file included in this repo and connect by running:\ncon \u0026lt;- dbConnect(odbc(), \u0026quot;snowflake\u0026quot;)  Using snowflake with R and Tidyverse commands Below is some examples of things you can do after you have set up your connection with Snowflake\n#Connect to a table or view df \u0026lt;- tbl(con, 'yourTableName') #Full load table data \u0026lt;- df%\u0026gt;%collect #Load 10 rows data \u0026lt;- head(10)%\u0026gt;%collect #add table dbCreateTable(con, \u0026quot;iris\u0026quot;, iris) #remove table dbRemoveTable(con, \u0026quot;iris\u0026quot;) #upload data dbWriteTable(con, \u0026quot;iris\u0026quot;, iris, overwrite = TRUE, row.names = FALSE)  Rounding things up There are so many ways to interact with Snowflake. It is definitely one of my favorite platforms to work on at the moment. I personally enjoy using R for a variety of tasks, and having build this image has made things a bit easier for me. I hope this can be of use to others in the R commmunity using Snowflake.\nLet me know if this post is easy to follow or if it needs additional explanation by leaving a comment.\n","date":1632182400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632182400,"objectID":"d73ac17bce0df86c24cc6e7317ef38b6","permalink":"/post/connecting-to-snowflake-with-r/","publishdate":"2021-09-21T00:00:00Z","relpermalink":"/post/connecting-to-snowflake-with-r/","section":"post","summary":"Using R to create workflows and analysis with snowflake","tags":["R","Snowflake"],"title":"Connecting to Snowflake With R","type":"post"},{"authors":["Danny Mawani Holmgaard"],"categories":null,"content":"Table of Contents    Introduction The service account key Building the code Optional R Markdown Conclusion and final thoughts     Introduction In my work, data pipelines are nesscesary in order to provide clients with the correct data. unfortunately sometimes due to changes in the API, access being removed, or unexpected timeouts and crashes ends up having the data not being updated properly meaning that the marketing automation systems and dashboards are not updated.\nWe almost store all relevant data in BigQuery, while the same data can be pushed to many other platforms such marketing automation systems, SQL databases etc. Because of this, we can utilize the metadata from BigQuery and see if the datasets are updated at the right time.\nAt the moment the data is compiled to an R markdown document which makes anyone in our BI team to easily see if the data is up to date, should something be wrong, but use it in any way you see fit.\nThe service account key I could spend a few hours writing down how to create a service account key in the Google Cloud Platform, however I think it would be smarter to link it right here instead: https://cloud.google.com/iam/docs/creating-managing-service-account-keys\nOnce it is created, put it in the directory you are working on in R, and open it up. It should look like this:\n{ \u0026quot;type\u0026quot;: \u0026quot;service_account\u0026quot;, \u0026quot;project_id\u0026quot;: \u0026quot;youproject\u0026quot;, \u0026quot;private_key_id\u0026quot;: \u0026quot;keyid1+239123\u0026quot;, \u0026quot;private_key\u0026quot;: \u0026quot;-----BEGIN PRIVATE KEY-----\\nadfsdfsdfdsfdsfsdfaenIkd\\nTVaeeeOZIODyN3ZYWxLwersffsdfdsb4we71lbHrg\\nkJwHn8osrhssgfhCxp8y15YV8jrDof+TChTDe5wIj5WPvJO8\\ndyBFchZx0ptbakmPb/ybeU7gKi3yPO29Mgoz4Cb47gNPvuZX82ic3dYE7YMEO1VF\\nyfc1zHF6UJEAdrMSe+YO5oiGABemGj8FTNb+0Q0XurC4da3Qvwmz43OaICNTGzgI\\nmkHB6fqsvSSVDi0agPE68wVGIDSEew9kEGUeAMw/e+T7NIY8z2PYJ5Dv6RWj/+b9\\nh1XHiEwBAgMBAAECggEAISrTAqBfXFX966X8CVPjd3C198Yn/oyMssdfdsfdsÅQelFF\\nJKxAt/Pnyr2xDYZLWgK3QChYibhufCwHq6V7BiWSO7F2PluuJedr9scG7u+t5se7\\nr7gpyhTZIxljRsfdgsfgmEGDQz1wVpYnghySNHIHSWQcRG\\nARYkv9v9LmwStA20Tr3BGEa1t3GF+4DAnW5DIP50TwzHv0wiG0+5vX3bWc+x/NR0\\njAJKsDcoMzNtIqieLm7cizjS9Ku+rdHaelN8dt51jVAHATQ4oXwEyA0SpbkaLbqx\\nvU+Y4U3plPZ1uAWHAtSI6fsrqOKpWA3g6MHVDiJQKQKBgQDGqbi62wq6vWETzByo\\nOoiVvJLszm8iYA7LkgKPsJsfVvd+HJcv7uldL04ZaUIGvZ24shbRLN78Z0AnRzxX\\nXZF3Vn64ROfxDSkcYOitipRdxBlsdfgrfbbZqeOvPVSy3qMn1Bqlf\\ndFNvEtcMQ6YhRbAjbjgvlgiBTQKBgQC6yseYbmiJyRASBcyXcaguuvoebnn7l8r8\\n2S1A7wTt1Sy5iPn1RfmUP4DK09y4zNtRYtNwNhu/VhB20MU8Na9ImKBVuvA3O0Ic\\nIUeRFgDI2M3u4rGkLlsfgdgdf7f9oRUhPefGIAcNiqm3SACB2w9T\\nuo5yMGIbhQKBgQCSkR7wBLCqysfdgfdgsdfO1X6U4kvCyG8oV1chsdfgfdgO6sSveufbbYGApKhpy2R6fydxNQKBgBHg\\nØØØØØkzEA1exc3HfaaB5ayGz5LvLKP5hwe2Lt47HL6TFg\\nw9t5Ui59jhXQ5Q9eE+hesvmBanver/UBOlgoQur11L+H8nhD9vEQOLOThyA2xmha\\nS6V0sacUQ3Fq+0N6zTH+åååååøøøåå+q4y7JQSQiHd23\\n22e4PAfX3Df+8860Axrx6fkImbvKxuOZ+uYpwhYMpPdgvukuAqXCHDcG5Fiho28g\\n27JHFzQql0pn9Pj4O+WkUOs0rX9rcPjvV9h6Jc/YEWV6YwXMnEkKRaMj44+x7a69\\npPfrTO7pBJAquiiU3dCmVDU=\\n-----END PRIVATE KEY-----\\n\u0026quot;, \u0026quot;client_email\u0026quot;: \u0026quot;yourserviceaccoutname@yourproject.iam.gserviceaccount.com\u0026quot;, \u0026quot;client_id\u0026quot;: \u0026quot;12345678910\u0026quot;, \u0026quot;auth_uri\u0026quot;: \u0026quot;https://accounts.google.com/o/oauth2/auth\u0026quot;, \u0026quot;token_uri\u0026quot;: \u0026quot;https://oauth2.googleapis.com/token\u0026quot;, \u0026quot;auth_provider_x509_cert_url\u0026quot;: \u0026quot;https://www.googleapis.com/oauth2/v1/certs\u0026quot;, \u0026quot;client_x509_cert_url\u0026quot;: \u0026quot;https://www.googleapis.com/robot/v1/metadata/x509/yourserviceaccountname%40yourproject.iam.gserviceaccount.com\u0026quot; }  Here you need to add the email you see under  \u0026quot;client_email\u0026quot;: \u0026quot;yourserviceaccoutname@yourproject.iam.gserviceaccount.com\u0026quot; and add that to all the BigQuery projects you want to monitor:\nBuilding the code 1. authenticate and load libraries** #libraries library(bigQueryR) library(purrr) library(dplyr) #auth bigQueryR::bqr_auth(\u0026quot;yourauthfile.json\u0026quot;)  2. Get a list of all projects and datasets #get projects projects \u0026lt;- bigQueryR::bqr_list_projects() #get datasets datasets \u0026lt;- lapply(projects$projectId,bqr_list_datasets) datasets \u0026lt;- bind_rows(datasets)  This will give us two tables that show us all the projects and datasets that the service account have access to. We need this information to list all avaliable tables.\n3. Get a list of all tables to extract metadata #get tables listTables \u0026lt;- function(id,dataset){ bqr_list_tables(projectId = id, datasetId = dataset, maxResults = -1) } tables \u0026lt;- mapply(listTables,datasets$projectId,datasets$datasetId) tablesCombined \u0026lt;- bind_rows(tables)  Then we can use these lines in order to extract the metadata:\n#get meta tablesMeta \u0026lt;- function(project,dataset,table){ bqr_table_meta(projectId = project, datasetId = dataset, table) } tablesMeta \u0026lt;- mapply(tablesMeta,tablesCombined$projectId,tablesCombined$datasetId,tablesCombined$tableId)  It can take some time if you have a lot of projects. If you want to speed up the process you can process it with the future package instead to run it in parallel: https://cran.r-project.org/web/packages/future/index.html.\nOnce it is done, we get a list of which gives us a list of objects with metadata:\nAs seen, it isn\u0026rsquo;t great for working with yet, so we need to take the information we need for each list object and stitch it together in a format that is more fit for working with.\nThe process will be to:\n Get the number of rows in the listobject create an empty dataframe with column names extract the data we need for each list  #create a dataframe with the right information for bq #get the total rows i \u0026lt;- seq_along(1:NROW(tablesMeta)) #create an empty dataframe with column headers bqUpdate \u0026lt;- setNames(data.frame(matrix(ncol = 7, nrow = 0)), c(\u0026quot;id\u0026quot;,\u0026quot;projectId\u0026quot;,\u0026quot;datasetId\u0026quot;,\u0026quot;creationTime\u0026quot;,\u0026quot;lastModifiedTime\u0026quot;,\u0026quot;type\u0026quot;,\u0026quot;location\u0026quot;)) #create function for looping for appending metadata combineMetaData \u0026lt;- function(i){ add_row(bqUpdate, id = tablesMeta[[i]][[\u0026quot;id\u0026quot;]], projectId = tablesMeta[[i]][[\u0026quot;tableReference\u0026quot;]][[\u0026quot;projectId\u0026quot;]], datasetId = tablesMeta[[i]][[\u0026quot;tableReference\u0026quot;]][[\u0026quot;datasetId\u0026quot;]], creationTime = tablesMeta[[i]][[\u0026quot;creationTime\u0026quot;]], lastModifiedTime = tablesMeta[[i]][[\u0026quot;lastModifiedTime\u0026quot;]], type = tablesMeta[[i]][[\u0026quot;type\u0026quot;]], location = tablesMeta[[i]][[\u0026quot;location\u0026quot;]] ) } #run the function and combine it upload \u0026lt;- map(i,combineMetaData) upload \u0026lt;- bind_rows(upload)  Finally format the table a little, so it is more readable:\nupload$creationTime \u0026lt;- format(as.POSIXct(as.double(upload$creationTime)/1000, origin = \u0026quot;1970-01-01\u0026quot;, tz = \u0026quot;GMT-1\u0026quot;),\u0026quot;%Y-%m-%d %H:%M:%S\u0026quot; ) upload$lastModifiedTime \u0026lt;- format(as.POSIXct(as.double(upload$lastModifiedTime)/1000, origin = \u0026quot;1970-01-01\u0026quot;, tz = \u0026quot;GMT-1\u0026quot;),\u0026quot;%Y-%m-%d %H:%M:%S\u0026quot; ) upload$dataset \u0026lt;- gsub(\u0026quot;.*\\\\.\u0026quot;,\u0026quot;\u0026quot;,upload$id) upload$daysSinceUpdate \u0026lt;- Sys.Date()-as.Date(as.character(upload$lastModifiedTime), format=\u0026quot;%Y-%m-%d\u0026quot;) upload \u0026lt;- upload[order(upload$daysSinceUpdate, decreasing=F),]  The output should look something like this: And voila, you now have a list of all your tables in BigQuery, as well as being able to see how many days it is since they were last updated.\nOptional R Markdown In our company, the persons in charge of marketing automation and data visualization, wanted to be able to pinpoint if there should be any issues with having updated data in their systems, as the first thing they look through. I therefore created a R markdown document, that they could use by visiting a page stored in Google Cloud Storage.\nThis makes it possible to see the tables who are not updated within the last day, which one who are updated, and a list of all tables. It even colors table in different colors depending on how long it has been since the last update.\nTables not updated are not nesscesarily a bad thing, as some static tables are needed to benchmark. I do however recommend to look at some of the tables once in a while to see if it would make sense to delete them.\nBelow is the code that I used to generate it:\n Conclusion and final thoughts This post displays a way to monitor your bigQuery tables. If you are running a lot of jobs, it can make sense to use this as a quick way to see if some tables are not updated, should some of your systems fail. For building data pipelines using cronjobs, og cloud builds etc. I do recommend take a look at Stackdriver in GCP, as it can monitor failed jobs and send textmessages, slack notifications or emails with customized dynamic text. I will try and write a guide about this in the future.\nIf you do consider automating grabbing the metadata from bigQuery, I recommend you to read Mark\u0026rsquo;s post on how to update it automatically using Google Cloud Build.\nLet me know if this post is easy to follow or if it needs additional explanation by leaving a comment.\n","date":1582848000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582848000,"objectID":"3a559af9a0e33cf23894ad3264cef1ca","permalink":"/post/bigquery-monitoring-with-metadata/","publishdate":"2020-02-28T00:00:00Z","relpermalink":"/post/bigquery-monitoring-with-metadata/","section":"post","summary":"Using R to monitor and extract metadata from all tables to see if they are updated","tags":["R","bigQuery"],"title":"Make sure your data is up to date in bigquery","type":"post"},{"authors":null,"categories":null,"content":"Introduction This post is based on a project where we needed to see how many transactions we were actually missing in Google Analytics.\nThe how to This process is quite simple, we will be pulling out transaction id\u0026rsquo;s and then make it into a list. After that we compare that list with another\nga_id \u0026lt;- \u0026quot;yourgaid\u0026quot; data \u0026lt;- google_analytics(ga_id, date_range = c(\u0026quot;2019-01-23\u0026quot;, \u0026quot;2019-02-13\u0026quot;), metrics = \u0026quot;users\u0026quot;, dimensions = c(\u0026quot;transactionId\u0026quot;), max = -1) #Your transaction ids rowa \u0026lt;- as.list(data$transactionId) #the other list of transaction ids rowb \u0026lt;- as.list(sfData$ti) #make them into characters rowa \u0026lt;- as.character(rowa) rowb \u0026lt;- as.character(rowb) #Only get the ones that doesn't match list1 \u0026lt;- setdiff(rowb, rowa) #Make a dataframe from only those who are missing df \u0026lt;- sfData[sfData$ti %in% list1, ]  Conclusion This is a very short tutorial, it is not formatted very pretty, but it should get the trick done in terms of validating if anything should be missing in terms of transactions in Google Analytics. Please leave a comment should you need further elaboration on this progress!\n","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"a5d40625465eddc47f83877e388db8aa","permalink":"/post/measurement-protocol-usecases/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/measurement-protocol-usecases/","section":"post","summary":"How to compare data from GA to another dataset to see if there are any discrepencies","tags":null,"title":"Detect missing data in GA with R","type":"post"},{"authors":["Danny Mawani Holmgaard"],"categories":null,"content":"the slides\n ","date":1559952000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559952000,"objectID":"bb29481c1ff6dfeb0834bdbec6aa1570","permalink":"/talk/r-on-google-cloud-platform/","publishdate":"2019-06-08T00:00:00Z","relpermalink":"/talk/r-on-google-cloud-platform/","section":"talk","summary":"Introduction on scheduling tasks of Google Cloud","tags":["R","GCP","Google Cloud"],"title":"R on the Google Cloud Platform - Scheduling tasks","type":"talk"},{"authors":null,"categories":null,"content":"Table of Contents  Introduction How the measurement protcol works Usecases  Uploading refunds Uploading transactions   words of caution  1. Create filters to block views 2. Remove the \u0026ldquo;Exclude all hits from known bots and spiders\u0026rdquo; checkmark 3. Latency   conlusion   Introduction This blogpost was inspired by a release to a website which had some last minute changed that when the site when live, caused a javaScript error that blocked the ecommerce transaction data to not populate.\nWith this error, the client lost 1800+ transactions to the site meaning that we had to upload these in the right currency format to make sure that all the data was still avaliable.\nHow the measurement protcol works Whenever you visit a website, Google Analytic will collect information by sending a long list of query parameters to an endpoint, to which it is stored and modelled to show information in GA. Visiting this blogpost will for an example generate a network call similar to this:\nhttps://www.google-analytics.com/r/collect?v=1\u0026amp;_v=j73\u0026amp;a=1679354847\u0026amp;t=pageview\u0026amp;_s=1\u0026amp;dl=https%3A%2F%2Fwww.mawani.dk%2Fpost%2Fmeasurement-protocol-usecases%2F\u0026amp;ul=en-us\u0026amp;de=UTF-8\u0026amp;dt=Creating%20a%20workflow%20with%20measurement%20protocol%20and%20R%20%7C%20DMH%20Analytics\u0026amp;sd=24-bit\u0026amp;sr=1440x900\u0026amp;vp=1440x256\u0026amp;je=0\u0026amp;_u=QACAAAAB~\u0026amp;jid=651243071\u0026amp;gjid=1319476248\u0026amp;cid=1164110852.1529450664\u0026amp;tid=UA-134673438-1\u0026amp;_gid=106302445.1550868348\u0026amp;_r=1\u0026amp;gtm=2wg241WBTJ7HR\u0026amp;z=1265093896  This will tell Google Analytics that:\n The URL is this one My browser language is en-us what my device id is from the cookie so it can recognize me as a new or returning user What tracking ID it should populate the data to What my session ID is.  What measurement protocol will do is to emulate the same types of parameters and have it populate the data in GA.\nFor a more detailed view on measurement protocol I would advise you to visit Optimize Smart for their deepgoing description.\nUsecases I have used measurement protocol for a various number of things. As you can send in all the supported information, this is a great area to explore in terms of improving your data collection. As for many of my other posts, I will be using another package created by Mark Edmonson called googleMeasureR to send the hits to Google Analytics, however you can easily transfer the way of doing this to any language of your choice such as Python, javaScript, PHP etc.\nUploading refunds To upload refunds you first need a list of all the transactions that are missing. If you are on a site with multiple currencies it is also quite important that you can specify what unit that you are adding data to, so you are sure that it is populated correctly.\nFirst thing that need to be done is to make sure that the data is loaded into R. I have chosen to rename the columns to the GA naming convention for measurement protocol, but it is not important:\n   Once that is made, we need to either have the client id (Google Analytics Cookie ID for identifying people), or create one yourself. This can be done by this code:\n#loading the library library(stringi) #the count of rows you need to upload n \u0026lt;- nrow(yourDataframe) #create the ids paste(\u0026quot;1.2.\u0026quot;,stri_rand_strings(n, 10, pattern = \u0026quot;[0-9]\u0026quot;),\u0026quot;.\u0026quot;,stri_rand_strings(n, 10, pattern = \u0026quot;[0-9]\u0026quot;), sep = \u0026quot;\u0026quot;) #output will look something like this if you print it out in the console [1] \u0026quot;1.2.6237558844.6715115260\u0026quot; \u0026quot;1.2.4893337628.0287915875\u0026quot; \u0026quot;1.2.1414860945.6106576917\u0026quot; [4] \u0026quot;1.2.8992586956.6450277842\u0026quot; \u0026quot;1.2.2032023475.7135641438\u0026quot; \u0026quot;1.2.1490282359.1139988407\u0026quot; [7] \u0026quot;1.2.7613957961.8692578524\u0026quot; \u0026quot;1.2.8481705025.8828767075\u0026quot; \u0026quot;1.2.1331455569.2063291053\u0026quot; [10] \u0026quot;1.2.9292335596.4531869013\u0026quot; ### add it to the dataframe yourDataframe$cid \u0026lt;- paste(\u0026quot;1.2.\u0026quot;,stri_rand_strings(n, 10, pattern = \u0026quot;[0-9]\u0026quot;),\u0026quot;.\u0026quot;,stri_rand_strings(n, 10, pattern = \u0026quot;[0-9]\u0026quot;), sep = \u0026quot;\u0026quot;)  Now that a client id is added we are ready to push the refunds into Google Analytics:\n####upload v \u0026lt;- 1 #version cs \u0026lt;- \u0026quot;measurementprotocol\u0026quot; #source cm \u0026lt;- \u0026quot;refund\u0026quot; #medium t \u0026lt;- \u0026quot;event\u0026quot; #type ec \u0026lt;- \u0026quot;Ecommerce\u0026quot; #event category ea \u0026lt;- \u0026quot;measurementProtocol\u0026quot; #event action el \u0026lt;- \u0026quot;refund\u0026quot; #event label tid \u0026lt;- \u0026quot;UA-1234567-1\u0026quot; #Google Analytics ID pa \u0026lt;- \u0026quot;refund\u0026quot; #product action ta \u0026lt;- \u0026quot;measurementprotocol\u0026quot; #transaction affiliation #for each row in the dataframe send a hit with measurement protocol for(i in 1:nrow(yourDataframe)) { cid \u0026lt;- yourDataframe$cid[i] ti \u0026lt;- yourDataframe$ti[i] tr \u0026lt;- yourDataframe$tr[i] cu \u0026lt;- yourDataframe$cu[i] gmr_post(list(v=v,cs=cs,cm=cm,t=t,ec=ec,ea=ea,el=el,tid=tid,cid=cid,pa=pa,ti=ti,tr=tr,cu=cu,ta=ta,ni=\u0026quot;1\u0026quot;))  And there you have it, the refunds should be uploaded.\nUploading transactions This is actually the exact same steps you go through - the primary difference is that you need to change the product action from refund to purchase:\n####upload v \u0026lt;- 1 #version cs \u0026lt;- \u0026quot;measurementprotocol\u0026quot; #source cm \u0026lt;- \u0026quot;purchase\u0026quot; #medium t \u0026lt;- \u0026quot;event\u0026quot; #type ec \u0026lt;- \u0026quot;Ecommerce\u0026quot; #event category ea \u0026lt;- \u0026quot;measurementProtocol\u0026quot; #event action el \u0026lt;- \u0026quot;refund\u0026quot; #event label tid \u0026lt;- \u0026quot;UA-1234567-1\u0026quot; #Google Analytics ID pa \u0026lt;- \u0026quot;purchase\u0026quot; #product action ta \u0026lt;- \u0026quot;measurementprotocol\u0026quot; #transaction affiliation #for each row in the dataframe send a hit with measurement protocol for(i in 1:nrow(yourDataframe)) { cid \u0026lt;- yourDataframe$cid[i] ti \u0026lt;- yourDataframe$ti[i] tr \u0026lt;- yourDataframe$tr[i] cu \u0026lt;- yourDataframe$cu[i] gmr_post(list(v=v,cs=cs,cm=cm,t=t,ec=ec,ea=ea,el=el,tid=tid,cid=cid,pa=pa,ti=ti,tr=tr,cu=cu,ta=ta,ni=\u0026quot;1\u0026quot;))  words of caution When you add data to Google Analytics, it is not possible to remove it again, so remember to test what you are doing beforehand and be sure that what you are doing is correct.\nBelow is some areas that you need to remember when doing uploads through measurement protocol:\n1. Create filters to block views Create an exclude filter to exclude all event action called \u0026ldquo;measurementprotocol\u0026rdquo;. This ensures that you data is only send to the views you need.\n2. Remove the \u0026ldquo;Exclude all hits from known bots and spiders\u0026rdquo; checkmark In some instances I saw that the measurement protocol hits where blocked when this was not checked off. Remember to switch it on the day after so you are secured against people spamming your analytics account with bot traffic.\n3. Latency There is a latency from the the data is send to that it is populated. Unfortunately if you add / remove filters before the day is over it will take in / remove the hits from measurement protocol meaning that you will endanger your datacollection.\nconlusion This is a simple how-to guide on doing basic things with measurement protocol, there are a lot about datacleaning that could have been included but it would be out of the scope of this blogpost.\nIn terms of all the parameters added in the call, there are many that could have been excluded, however i choose to add them as it will be easier to filter them out in different instances should you need to do that.\nA main issue with measurement protocol, when you don\u0026rsquo;t have the right client id is that you do loose the user behaviour and affect your traffic if you are doing bulk uploads in a day. It is therefore important to consider if this is the right solution for the task, and be sure that the data being send in is correct.\n","date":1551398400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551398400,"objectID":"b15f1e67baa8810ae3f14e88ef28dc55","permalink":"/post/detect-missing-data-with-r-a-google-analytics-example/","publishdate":"2019-03-01T00:00:00Z","relpermalink":"/post/detect-missing-data-with-r-a-google-analytics-example/","section":"post","summary":"This is a simple how-to guide on doing basic things with measurement protocol","tags":null,"title":"Creating a workflow with measurement protocol and R","type":"post"},{"authors":null,"categories":null,"content":"Table of Contents  Background Usecase The code  1. Connect To Google Analytics 2. Setting up the script to pull from multiple properties   Conclusion   Background Being in an agency, we often have to do benchmarks, reports etc. that require us to pull data from multiple Google Analytics properties.\nUsecase One of our client have multiple properties each containing 3 business units, a B2B, B2C and B2G (Business to government). To make sure that we could reproduce the reporting for them, we build an R script that:\n Pulls Google Analytics data Adds business unit and country to the dataframe as additional variables / columns Merges the data into another dataframe  The code To extract the data, use the googleAnalyticsRand googleAuthRpackage made by Mark Edmonson. To see more information about installing the packages and using the libraries please check out the site made explaining how the package work here\n1. Connect To Google Analytics To begin with we must first authenticate to Google Analytics.\nlibrary(googleAnalyticsR) googleAnalyticsR::ga_auth()  Next you will be asked to log in with your Google Account. Once that is done, we are ready to do the rest of the script.\n Remember to authenticate with the account you want access to   2. Setting up the script to pull from multiple properties To combine different properties we are fest specifying the views we need and adding them to a list. Once that is done we will create 2 corresponding lists with business units and countries.\n#this are the view links which can be find under view settings or through the URL of the view - If you are used to working with this package, you can also do an extraction of all your views directly from R. The below views are fake. #Danish dk_b2b \u0026lt;- \u0026quot;123213213\u0026quot; dk_b2c \u0026lt;- \u0026quot;543454533\u0026quot; dk_b2g \u0026lt;- \u0026quot;173714215\u0026quot; #Finnish fi_b2b \u0026lt;- \u0026quot;345345435\u0026quot; fi_b2c \u0026lt;- \u0026quot;345435345\u0026quot; fi_b2g \u0026lt;- \u0026quot;234234232\u0026quot; #French fr_b2b \u0026lt;- \u0026quot;655464555\u0026quot; fr_b2c \u0026lt;- \u0026quot;989834589\u0026quot; fr_b2g \u0026lt;- \u0026quot;039485309\u0026quot; #adding all the views to a list views \u0026lt;- c(dk_b2b,dk_b2c,dk_b2g,fi_b2b,fi_b2c,fi_b2g,fr_b2b,fr_b2c,fr_b2g) #countries should be in the same order as your list above, we will use this to add attributes to the dataframe countries \u0026lt;- c(\u0026quot;DK\u0026quot;,\u0026quot;DK\u0026quot;,\u0026quot;DK\u0026quot;,\u0026quot;FI\u0026quot;,\u0026quot;FI\u0026quot;,\u0026quot;FI\u0026quot;,\u0026quot;FR\u0026quot;,\u0026quot;FR\u0026quot;,\u0026quot;FR\u0026quot;) #same approach for business units BU \u0026lt;- c(\u0026quot;B2B\u0026quot;,\u0026quot;B2C\u0026quot;,\u0026quot;B2G\u0026quot;,\u0026quot;B2B\u0026quot;,\u0026quot;B2C\u0026quot;,\u0026quot;B2G\u0026quot;,\u0026quot;B2B\u0026quot;,\u0026quot;B2C\u0026quot;,\u0026quot;B2G\u0026quot;) #Set a start and enddate startDate \u0026lt;- \u0026quot;2018-01-01\u0026quot; endDate \u0026lt;- as.character(Sys.Date()-1) #Set dimensions and metrics dimensions \u0026lt;- c(\u0026quot;year\u0026quot;,\u0026quot;sourceMedium\u0026quot;,\u0026quot;campaign\u0026quot;) metrics \u0026lt;- c(\u0026quot;sessions\u0026quot;,\u0026quot;transactions\u0026quot;,\u0026quot;transactionRevenue\u0026quot;) #create an empty dataframe upload \u0026lt;- data.frame() #pulling the data for(i in seq_along(views)) { data \u0026lt;- google_analytics(views[i], date_range = c(startDate,endDate), metrics = metrics, dimensions = dimensions,max = -1) data$country \u0026lt;- countries[i] data$bu \u0026lt;- BU[i] upload \u0026lt;- rbind(upload,data) }  The end states that for each element in the view list, then run the analytics script, apply the data and business unit to the corresponding list item to the dataframe \u0026ldquo;data\u0026rdquo;, and then add it to the empty dataframe.\n Since writing this post i now recommend using mapply (or future_mapply to run it faster in parallel). I will however not change this, as the for loop might do a better job explaining what happens and how the process work.   Conclusion Now that the dataframe has been made it is up to you what to do with it. you can either upload it to bigQuery, do some statistics with R and some plot with ggplot2 or just write it down to a CSV file with r write.csv2(upload,\u0026quot;yourFileName.csv\u0026quot;) and work with it in another tool like Excel, Tableau or powerBI.\n","date":1551398400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551398400,"objectID":"c02261a7368aa46db859ff59f6df9086","permalink":"/post/pull-data-from-multiple-ga-properties/","publishdate":"2019-03-01T00:00:00Z","relpermalink":"/post/pull-data-from-multiple-ga-properties/","section":"post","summary":"Benchmarking your data can be rough. In this post we go through how to pull data from multiple GA accounts","tags":null,"title":"Pull data from multiple Google Analytics Properties with R","type":"post"},{"authors":null,"categories":null,"content":"Table of Contents  Background Why is sourcing from github smart? The how-to part  1. Setting up a github account 2. Creating a bucket in Google Cloud Storage 3. Creating a trigger with Cloud Build 4. Setting up the YALM 5. Sourcing scripts from Cloud Storage   Thoughts and conclusion   source-r-with-github\nBackground In my company, we have gone from 1 person working with adhoc assignment with R, to 4 persons within the last year. This set\u0026rsquo;s up a whole new level of requirements to ensure quality, stability and safety when it comes to working with datamodels and API calls. Furthermore, there is also an aspect of reusability that needed to be set up to ensure that we could produce our solutions faster,and better updated.\nTo do this, we started looking into differen\u0026rsquo;t types of systems to work with our code. In the end we have selected Github as our main source of creating our code and documentation.\nTo get to know how to do this, I actually used this guide: Automated Static Website Publishing with Cloud Build , and used most of the principles in the guide to set up our setup.\nWhy is sourcing from github smart? Github allows us to:\n Share code easily Scale projects to other customers Ensure documentation Making updates to code safe and with the possibility to roll-back should something break See who have created code Source Scripts directly in R  Unfortunately, going into how to use Github is a bit out of the scope for this post, however I recommend going to Github and read their documentation and do a few searches on the net to get started.\nThe how-to part In order to source R scripts from github there are a few things you need to have ready in order to get ready:\n1. Setting up a github account One of the first thing you will need is to actually create a Github account . This can be done on the frontpage:\n   Once that is done, create a repository:\n   Recently, it\u0026rsquo;s been possible to create private repositories for free1. As we are multiple users that are using Github right now, we did manage to get our financaial department to approve the monthly 7$ account fee, however in theory, you could create a shared login to help get you started.\n2. Creating a bucket in Google Cloud Storage   Set up billing for GCP (Google Cloud Platform)  Create a bucket in Google Cloud Storage):      3. Creating a trigger with Cloud Build Now, this part is something that is already documented in the GCP documentaion. To avoid copying the same guide in this post, instead go to this page and follow the steps from the headling: Set up automated builds until you see this line: \u0026ldquo;Now, create a cloudbuild.yaml\u0026rdquo;. From there, you will not need to follow the rest of the steps to continue this guide.\n4. Setting up the YALM YALM stands for \u0026ldquo;Yet Another Markup Language\u0026rdquo; and will be added to Github. From here, the YALM file sends the information to Cloud Build that copies the updates on Github into the Cloud Storage Bucket just created.\nIn your Github repo, click on \u0026ldquo;Create new file\u0026rdquo;. Now, add the following YALM syntax in the edit section:\nsteps: - name: gcr.io/cloud-builders/gsutil args: [\u0026quot;-m\u0026quot;, \u0026quot;rsync\u0026quot;, \u0026quot;-r\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;-d\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;gs://yourfolderincloudstorage/ifneededthencreateasubfolder\u0026quot;]  save the file as cloudbuild.yaml.\nOnce that is done, each change made to your repository will be pushed directly to Google Cloud Storage, where it is possible to run R scripts.\n5. Sourcing scripts from Cloud Storage Playing around with R and the Google API universe usually means using something that Mark Edmonson has build, and this post is not an exception.\nWe will be using the Package called \u0026ldquo;googleCloudStorageR\u0026rdquo;, which you can find more information about here.\nTo source a script from Google Cloud Storage, use this R codeto authenticate and source the script you need:\n#install.package(\u0026quot;googleCloudStorageR\u0026quot;) if you have not installed it yet #load the library library(googleCloudStorageR) #Authenticate gcs_auth() googleCloudStorageR::gcs_source('yoursubfolderifyouhaveone/yourscript.R', bucket = 'yourcreatedbucket')  And voila. This means that you can always download your R files where ever you need it, build on it, add the information back to github and source the script from a third place without having to have multiple copies of your code laying around.\nThoughts and conclusion This post have showed how to use Github to run R scripts and keep them updated. I do recommend trying to document and automate as much as possible when working with R, however this should only be used whenever it makes sense. If you are building something on the fly that will only be used for a specific tasks once, then it might not make sense to go through all of this to make your workflow optimal.\n  A repository is a folder to which your content in github is stored. This is usually your code files.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1551398400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551398400,"objectID":"20f5c3afb48781d38a3bae657fadd4f8","permalink":"/post/source-r-with-github/","publishdate":"2019-03-01T00:00:00Z","relpermalink":"/post/source-r-with-github/","section":"post","summary":"Making changes to your pipelines can be rough if you are multiple people working on the same project. This guide shows you how to use Github to make it easier","tags":null,"title":"Source R scripts from github through Google Cloud Storage","type":"post"},{"authors":["Danny Mawani Holmgaard"],"categories":["gcp","r"],"content":"Measurecamp CPH19 Creating datapipelines with R\nBy Danny Mawani Holmgaard\n Agenda  About my journey Stuff I am still figuring out Learn to grab different types of data   Connect Github and Cloud Storage Use R in the GCP Extract Transform and Load data into BigQuery    My journey  Worked with Digital Analytics for 6 years Lead Analyst @ IMPACT EXTEND Responsible for all data pipelines Moving from digital analytics to data engineering Primarily use R and GCP     Our team  Stuff I am currently trying to get better at using  Using Python and SQL instead of using R for everything Utilizing Docker Set up plumber API\u0026rsquo;s to make my life easier Deploying shinyapps to GCP with authentication     What i am trying to say is that there is a lot to grasp and that it takes time to optimize your workflow  But now, lets get to the place where we can get to do some cool stuff!  Grabbing different types of data  SQL Servers #load libraries #library(tidyverse) #library(dbi) #library(odbc) #set up connection object con \u0026lt;- DBI::dbConnect(odbc::odbc(), Driver = \u0026quot;SQL Server\u0026quot;, Server = \u0026quot;yourserver.database.windows.net\u0026quot;, Database = \u0026quot;databasename\u0026quot;, UID = \u0026quot;userid\u0026quot;, PWD = \u0026quot;password\u0026quot;, Port = 1234) #extract data dataset \u0026lt;- as_tibble( tbl(con, \u0026quot;dataset\u0026quot;)%\u0026gt;% head(100) #Get the first 100 rows )   FTP Servers #library(RCurl) syntax \u0026lt;- \u0026quot;ftp://\u0026quot; ftpHost \u0026lt;- \u0026quot;ftp.yourserver.com.com\u0026quot; ftpUser \u0026lt;- \u0026quot;username\u0026quot; ftpPass \u0026lt;- \u0026quot;password\u0026quot; folder \u0026lt;- \u0026quot;/folder/\u0026quot; #delete folder if in root ftpURL \u0026lt;- paste(syntax,ftpHost,folder,sep = \u0026quot;\u0026quot;) #Download files function download \u0026lt;- function(file){ fileDownload \u0026lt;- file downloadFtpUrl \u0026lt;- paste(ftpURL,fileDownload, sep = \u0026quot;\u0026quot;) downloadFtpUrlCredentials \u0026lt;- paste(ftpUser,\u0026quot;:\u0026quot;,ftpPass, sep = \u0026quot;\u0026quot;) bin \u0026lt;- getBinaryURL(downloadFtpUrl,userpwd=downloadFtpUrlCredentials) con \u0026lt;- file(fileDownload, open = \u0026quot;wb\u0026quot;) writeBin(bin, con) close(con)} #Download files download(\u0026quot;yourfile.csv\u0026quot;)   postgress database #library('RPostgreSQL') #create connection object con \u0026lt;- dbConnect(drv =\u0026quot;RPostgreSQL\u0026quot;, user=\u0026quot;\u0026quot;, password=\u0026quot;\u0026quot;, host=\u0026quot;\u0026quot;, port=1234, dbname=\u0026quot;\u0026quot;) #extract data dataset \u0026lt;- as_tibble( tbl(con, \u0026quot;dataset\u0026quot;)%\u0026gt;% head(100) #Get the first 100 rows )   Google Analytics  Facebook and Instagram   It is difficult to download Facebook and instagram data\n  Seek a third party vendor instead\n    Remember, maintaining API work can require a lof of work and could potentially break whereas a vendor are living of maintaining these tools and have the right types of access    Connect Github and Cloud storage to your work  Github   Github is the closest thing you get to a \u0026ldquo;dropbox\u0026rdquo; for your code.\n  It allows version control and makes sure that your code is always updated\n  From github, you can push you code into other systems and work on the same projects\n     Cloud Storage   Cloud storage lets you upload and pull files in a secure environment\n  It has great API\u0026rsquo;s and can sync directly with bigQuery\n  Thanks to Mark Edmonson, we can also source R code directly from there\n      Set up Github and put you code there Create a bucket in Cloud Storage Create a trigger with cloudbuild where you link to the repo Add cloudbuild.yalm to the folder   steps: - name: gcr.io/cloud-builders/gsutil args: [\u0026quot;-m\u0026quot;, \u0026quot;rsync\u0026quot;, \u0026quot;-r\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;-d\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;gs://yourfolderincloudstorage/ifneededthencreateasubfolder\u0026quot;]    Sourcing from Cloud Storage #install.package(\u0026quot;googleCloudStorageR\u0026quot;) if you have not installed it yet #load the library library(googleCloudStorageR) #Authenticate gcs_auth() googleCloudStorageR::gcs_source('yoursubfolderifyouhaveone/yourscript.R', bucket = 'yourcreatedbucket')   Use R studio in the Google Cloud Platform  1. Set up billing  2. Thank Mark that he build a script that does everything for you # You need to authenticate with your GCP account before being able to do it gce_vm(\u0026quot;yourmachinename\u0026quot;, project =\u0026quot;gar-creds-185213\u0026quot;, zone = \u0026quot;europe-west1-b\u0026quot;, predefined_type = \u0026quot;g1-small\u0026quot;, template = \u0026quot;rstudio\u0026quot;, username = \u0026quot;username\u0026quot;, password = \u0026quot;password\u0026quot;)   The easy way to run scripts automatically from GCS  #set machine to be launched library(googleComputeEngineR) library(googleCloudStorageR) library(googleAuthR) gar_auth(\u0026quot;/home/username/.httr-oauth\u0026quot;) GCE_AUTH_FILE=\u0026quot;/home/username/auth.json\u0026quot; GCE_DEFAULT_PROJECT_ID=\u0026quot;projectname\u0026quot; GCE_DEFAULT_ZONE=\u0026quot;europe-west1-b\u0026quot; gcs_global_bucket(\u0026quot;bucketname\u0026quot;) BQ_AUTH_FILE=\u0026quot;/home/username/bq.oauth\u0026quot; vm \u0026lt;- gce_vm(\u0026quot;yourvirtualmachine\u0026quot;) vm \u0026lt;- gce_ssh_setup(vm, username = \u0026quot;username\u0026quot;, key.pub = \u0026quot;/home/username/.ssh/id_rsa.pub\u0026quot;, key.private = \u0026quot;/home/username/.ssh/id_rsa\u0026quot;) runme \u0026lt;- \u0026quot;Rscript -e \\\u0026quot;googleAuthR::gar_gce_auth();googleCloudStorageR::gcs_source('cloudstoragefolder/script.r', bucket = 'bucket')\\\u0026quot;\u0026quot; docker_cmd(vm, cmd = \u0026quot;exec\u0026quot;, args = c(\u0026quot;rstudio\u0026quot;, runme), wait = TRUE, capture_text = FALSE)    Automating the script to run at a specific time Remember - your if you turn of the machine, the cronjob settings will stop working  Sending data to bigQuery #library(bigQueryR) # First Create the dataset # bqr_create_table(projectId = \u0026quot;your project id\u0026quot;, # datasetId = \u0026quot;dataset\u0026quot;, \u0026quot;your table\u0026quot;, your dataframe, # timePartitioning = FALSE, expirationMs = 0L) bqr_upload_data(projectId = \u0026quot;your project id\u0026quot;, datasetId = \u0026quot;dataset\u0026quot;, \u0026quot;your table\u0026quot;, yourdataframe, overwrite = FALSE, #True to overwrite your table wait = TRUE, autodetect = FALSE, maxBadRecords = 1000)   Final thoughts   This is not the most stable way to do things, but the easiest\n  There is so many ways you can work with making your data flow\n  Start small and build your way up from there\n   Questions?   @dannymawani (Twitter / Linkedin)\n   www.mawani.dk\n   dmo@impact.dk\n  ","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"779fe014146695854844c818d83fcdcf","permalink":"/slides/r-on-gcp-slides/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/r-on-gcp-slides/","section":"slides","summary":"Creating datapipelines with R.","tags":["slides"],"title":"MEASURECAMP 2019 - CPH","type":"slides"},{"authors":["Danny Mawani Holmgaard"],"categories":null,"content":"the slides\n  Superweek2019 dmo presentation  from Danny Mawani Olsen ","date":1548979200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548979200,"objectID":"d291d65b623708fee9f6a76e3b97b675","permalink":"/talk/superweek-2019/","publishdate":"2019-02-01T00:00:00Z","relpermalink":"/talk/superweek-2019/","section":"talk","summary":"Automation within data engineering and processes in the business","tags":["automation"],"title":"Superweek 2019 - A tale of automation in data engineering","type":"talk"},{"authors":["Danny Mawani Holmgaard"],"categories":null,"content":"Se videoen her:   ","date":1543658400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543658400,"objectID":"9581327b5aad1565039318a3a054407b","permalink":"/talk/blackfriday/","publishdate":"2018-12-03T00:00:00Z","relpermalink":"/talk/blackfriday/","section":"talk","summary":"Dansk talk omkring de emner der er nødvendigt at have styr på inden man skal opsætte sin tracking før under og efter black friday","tags":["analytics","gtm","loadspeed"],"title":"Black friday seminar","type":"talk"},{"authors":["Danny Mawani Holmgaard"],"categories":null,"content":"  GDPR within Google Tag Manager - Measurecamp 2018  from Danny Mawani Olsen ","date":1543622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543622400,"objectID":"be41ac579a5ed9af211e425afad545b4","permalink":"/talk/ip-anonymization-while-excluding-internal-trafic/","publishdate":"2018-01-01T00:00:00Z","relpermalink":"/talk/ip-anonymization-while-excluding-internal-trafic/","section":"talk","summary":"How to keep GDPR compliant with Google Tag Manager","tags":["GTM","GDPR"],"title":"GDPR with Google Tag Manager","type":"talk"},{"authors":["Danny Mawani Holmgaard"],"categories":null,"content":" Original Link\n  Anonymization of IP adresses with Google Tag Manager  from Danny Mawani Olsen ","date":1543622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543622400,"objectID":"162b332d1208a336a4a1810bd33954e3","permalink":"/talk/gdpr-with-google-tag-manager/","publishdate":"2018-01-01T00:00:00Z","relpermalink":"/talk/gdpr-with-google-tag-manager/","section":"talk","summary":"Anonymizing ip adresses while excluding internal traffic on your site.","tags":["GTM","GDPR"],"title":"How to anonymize IP adresses and still be able to exclude internal traffic","type":"talk"},{"authors":["Danny Mawani Holmgaard"],"categories":null,"content":"the slides\n  Rclass  from Danny Mawani Olsen   full link here\n","date":1543622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543622400,"objectID":"40221d0fc05a29ade5faf4d3e91facc9","permalink":"/talk/r-introduction-class-measurecamp/","publishdate":"2018-01-01T00:00:00Z","relpermalink":"/talk/r-introduction-class-measurecamp/","section":"talk","summary":"Introduction class for R","tags":["R","Education"],"title":"R introduction class for measurecamp","type":"talk"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"}]